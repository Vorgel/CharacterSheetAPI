// <auto-generated />
using System;
using CharacterSheetAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CharacterSheetAPI.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220603151353_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CharacterSheetAPI.Model.Character", b =>
                {
                    b.Property<int>("CharacterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacterID"), 1L, 1);

                    b.Property<short?>("Age")
                        .HasColumnType("smallint");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("CorruptionPoints")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessionPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Race")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("SinPoints")
                        .HasColumnType("smallint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CharacterID");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("CharacterSheetAPI.Models.Appearance", b =>
                {
                    b.Property<int>("AppearanceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppearanceID"), 1L, 1);

                    b.Property<int>("CharacterID")
                        .HasColumnType("int");

                    b.Property<string>("EyesDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HairDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("Height")
                        .HasColumnType("smallint");

                    b.HasKey("AppearanceID");

                    b.HasIndex("CharacterID")
                        .IsUnique();

                    b.ToTable("Appearance");
                });

            modelBuilder.Entity("CharacterSheetAPI.Models.Characteristics", b =>
                {
                    b.Property<int>("CharacteristicsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CharacteristicsID"), 1L, 1);

                    b.Property<short>("BaseValue")
                        .HasColumnType("smallint");

                    b.Property<int>("CharacterID")
                        .HasColumnType("int");

                    b.Property<short>("CurrentValue")
                        .HasColumnType("smallint");

                    b.Property<short>("ExperienceDevelopedValue")
                        .HasColumnType("smallint");

                    b.Property<short>("TalentsDevelopedValue")
                        .HasColumnType("smallint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("CharacteristicsID");

                    b.HasIndex("CharacterID")
                        .IsUnique();

                    b.ToTable("Characteristics");
                });

            modelBuilder.Entity("CharacterSheetAPI.Models.Skill", b =>
                {
                    b.Property<int>("SkillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillID"), 1L, 1);

                    b.Property<short>("BaseValue")
                        .HasColumnType("smallint");

                    b.Property<int>("CharacterID")
                        .HasColumnType("int");

                    b.Property<short>("CurrentValue")
                        .HasColumnType("smallint");

                    b.Property<short>("ExperienceDevelopedValue")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("TalentsDevelopedValue")
                        .HasColumnType("smallint");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("SkillID");

                    b.HasIndex("CharacterID");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("CharacterSheetAPI.Models.Appearance", b =>
                {
                    b.HasOne("CharacterSheetAPI.Model.Character", null)
                        .WithOne("Appearance")
                        .HasForeignKey("CharacterSheetAPI.Models.Appearance", "CharacterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterSheetAPI.Models.Characteristics", b =>
                {
                    b.HasOne("CharacterSheetAPI.Model.Character", null)
                        .WithOne("Characteristics")
                        .HasForeignKey("CharacterSheetAPI.Models.Characteristics", "CharacterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterSheetAPI.Models.Skill", b =>
                {
                    b.HasOne("CharacterSheetAPI.Model.Character", null)
                        .WithMany("Skills")
                        .HasForeignKey("CharacterID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CharacterSheetAPI.Model.Character", b =>
                {
                    b.Navigation("Appearance");

                    b.Navigation("Characteristics")
                        .IsRequired();

                    b.Navigation("Skills");
                });
#pragma warning restore 612, 618
        }
    }
}
